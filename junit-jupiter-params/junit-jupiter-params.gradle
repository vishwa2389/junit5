apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'com.github.johnrengelman.shadow'

buildscript {
	repositories {
		maven { url='https://oss.jfrog.org/artifactory/plugins-snapshot/' }
	}
	dependencies {
		classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.0-SNAPSHOT'
	}
}

junitPlatform {
	filters {
		engines {
			include 'junit-jupiter'
		}
		includeClassNamePattern '.*Tests?'
	}
	logManager 'org.apache.logging.log4j.jul.LogManager'
}

dependencies {
	api(project(':junit-jupiter-api'))

	shadow('com.univocity:univocity-parsers:2.4.1')

	testImplementation("com.github.joel-costigliola:assertj-core:master-SNAPSHOT")
	testImplementation("org.mockito:mockito-core:${mockitoVersion}")
	testImplementation(project(path: ':junit-platform-engine', configuration: 'testArtifacts'))
	testImplementation(project(':junit-jupiter-engine'))
	testImplementation(project(':junit-platform-launcher'))
	testImplementation(project(':junit-platform-runner'))

	// Include junit-platform-console so that the JUnit Gradle plugin
	// uses the local version of the ConsoleLauncher.
	testRuntimeOnly(project(path: ':junit-platform-console', configuration: 'shadow'))
	testRuntimeOnly("org.apache.logging.log4j:log4j-core:${log4jVersion}")
	testRuntimeOnly("org.apache.logging.log4j:log4j-jul:${log4jVersion}")
}

sourceSets.main.compileClasspath += configurations.shadow
sourceSets.test.runtimeClasspath += configurations.shadow

eclipse {
	classpath {
		plusConfigurations += [ configurations.shadow ]
	}
}

idea {
	module {
		scopes.PROVIDED.plus += [ configurations.shadow ]
	}
}

javadoc {
	classpath = project.sourceSets.main.compileClasspath + configurations.shadow
}

jar.enabled = false

shadowJar {
	// Generate shadow jar only if the underlying manifest was regenerated.
	// See https://github.com/junit-team/junit5/issues/631
	onlyIf {
		(project.generateManifest || !shadowJar.archivePath.exists())
	}
	classifier = null
	configurations = [project.configurations.shadow]
	exclude 'META-INF/**'
	relocate 'com.univocity', 'org.junit.jupiter.params.com.univocity'
	from(projectDir) {
		include 'LICENSE-univocity-parsers.md'
		into 'META-INF'
	}
}

artifacts {
	archives shadowJar
}
